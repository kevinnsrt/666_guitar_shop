/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Form;


import Config.Koneksi; 
import com.mysql.cj.jdbc.Blob;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nitro
 */
public class Barang extends javax.swing.JFrame {
    private Connection conn;
    private File selectedImageFile;

    /**
     * Creates new form Barang
     */
    public Barang() {
        initComponents();
        conn = Koneksi.getConnection();
        
        getData();
    }
    
    public File getSelectedImageFile() {
    // Create a file chooser
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Pilih Gambar");
    
    // Set file filter to only allow image files (optional)
    fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg"));

    // Show the file chooser dialog
    int result = fileChooser.showOpenDialog(null);
    if (result == JFileChooser.APPROVE_OPTION) {
        // Return the selected file
        return fileChooser.getSelectedFile();
    } else {
        // If no file is selected, return null
        return null;
    }
}
    
    private void getData() {
    DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
    model.setRowCount(0); 

    try {
        String sql = "SELECT * FROM barang";
        PreparedStatement st = conn.prepareStatement(sql);
        ResultSet rs = st.executeQuery();

        while (rs.next()) {
            int id = rs.getInt("id");
            String nama_barang = rs.getString("nama_barang");
            int harga_barang = rs.getInt("harga_barang");
            String deskripsi_barang = rs.getString("deskripsi_barang");
            byte[] gambarBytes = rs.getBytes("gambar");

            ImageIcon gambar = null;
            if (gambarBytes != null) {
                gambar = new ImageIcon(gambarBytes);
                Image scaledImage = gambar.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH); 
                gambar = new ImageIcon(scaledImage);
            }

            Object[] rowData = {id, nama_barang, harga_barang, deskripsi_barang, gambar};
            model.addRow(rowData);
        }

        rs.close();
        st.close();
    } catch (Exception e) {
        Logger.getLogger(Barang.class.getName()).log(Level.SEVERE, null, e);
    }
}

        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidebar = new javax.swing.JPanel();
        pesananButton = new javax.swing.JButton();
        stockButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        stockPanel = new javax.swing.JPanel();
        nama_barang_field = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        harga_barang_field = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        deskripsi_barang_field = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_data = new javax.swing.JTable();
        search_field = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        create = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 102));
        setLocation(new java.awt.Point(0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sidebar.setBackground(new java.awt.Color(51, 51, 51));

        pesananButton.setBackground(new java.awt.Color(51, 51, 51));
        pesananButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        pesananButton.setForeground(new java.awt.Color(204, 204, 204));
        pesananButton.setText("Pesanan Masuk");
        pesananButton.setBorderPainted(false);
        pesananButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesananButtonActionPerformed(evt);
            }
        });

        stockButton.setBackground(new java.awt.Color(0, 102, 102));
        stockButton.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        stockButton.setForeground(new java.awt.Color(204, 204, 204));
        stockButton.setText("Stock Barang");
        stockButton.setBorderPainted(false);
        stockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("DASHBOARD");

        javax.swing.GroupLayout sidebarLayout = new javax.swing.GroupLayout(sidebar);
        sidebar.setLayout(sidebarLayout);
        sidebarLayout.setHorizontalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pesananButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stockButton, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(sidebarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addContainerGap())
        );
        sidebarLayout.setVerticalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(pesananButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(stockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(813, Short.MAX_VALUE))
        );

        getContentPane().add(sidebar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 240, 1080));

        stockPanel.setOpaque(false);

        nama_barang_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nama_barang_fieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nama Barang");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Harga");

        tbl_data.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tbl_data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "nama_barang", "harga_barang", "deskripsi_barang", "gambar"
            }
        ) {
            @Override
            public Class<?> getColumnClass(int column) {
                if (column == 4) { // Kolom ke-6 untuk gambar
                    return ImageIcon.class;
                }
                return Object.class;
            }
        });
        tbl_data.setRowHeight(100);
        jScrollPane1.setViewportView(tbl_data);

        search_field.setBackground(new java.awt.Color(102, 102, 102));
        search_field.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        search_field.setForeground(new java.awt.Color(255, 255, 255));
        search_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search_fieldActionPerformed(evt);
            }
        });

        searchButton.setBackground(new java.awt.Color(0, 102, 0));
        searchButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("Search");
        searchButton.setBorderPainted(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(102, 102, 102));
        resetButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setText("Reset");
        resetButton.setBorderPainted(false);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        create.setBackground(new java.awt.Color(0, 102, 0));
        create.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        create.setForeground(new java.awt.Color(255, 255, 255));
        create.setText("Create");
        create.setBorderPainted(false);
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(0, 0, 255));
        update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.setBorderPainted(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(204, 102, 0));
        delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.setBorderPainted(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        cancel.setBackground(new java.awt.Color(102, 102, 102));
        cancel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancel.setForeground(new java.awt.Color(255, 255, 255));
        cancel.setText("Cancel");
        cancel.setBorderPainted(false);
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(0, 102, 0));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Insert Image");
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Deskripsi");

        javax.swing.GroupLayout stockPanelLayout = new javax.swing.GroupLayout(stockPanel);
        stockPanel.setLayout(stockPanelLayout);
        stockPanelLayout.setHorizontalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanelLayout.createSequentialGroup()
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stockPanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(512, 512, 512))
                                .addGroup(stockPanelLayout.createSequentialGroup()
                                    .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(nama_barang_field, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(harga_barang_field, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(deskripsi_barang_field, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))))
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, stockPanelLayout.createSequentialGroup()
                        .addComponent(search_field)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        stockPanelLayout.setVerticalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanelLayout.createSequentialGroup()
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(stockPanelLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nama_barang_field, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(harga_barang_field, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(deskripsi_barang_field, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(92, 92, 92)
                        .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(create, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(stockPanelLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(search_field, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        getContentPane().add(stockPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, 1270, 730));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrouund_hero.jpg"))); // NOI18N
        background.setOpaque(true);
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(-200, -120, 1920, 1130));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void nama_barang_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nama_barang_fieldActionPerformed
        // TODO add your handling code here:
         DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
        model.setRowCount(0); // Reset table rows
        try {
            String sql = "SELECT * FROM barang";
            PreparedStatement st = conn.prepareStatement(sql);
            ResultSet rs = st.executeQuery();
            
            while (rs.next()) {
                int id = rs.getInt("id");
                String nama_barang = rs.getString("nama_barang");
                int harga_barang = rs.getInt("harga_barang");
                String deskripsi_barang = rs.getString("deskripsi_barang");
                
                Object[] rowData = {id, nama_barang, harga_barang, deskripsi_barang};
                model.addRow(rowData);
            }
            
            rs.close();
            st.close();
        } catch (Exception e) {
            Logger.getLogger(Barang.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_nama_barang_fieldActionPerformed

    
    private void resetForm() {
        nama_barang_field.setText("");
        harga_barang_field.setText("");
        deskripsi_barang_field.setText("");
    }
    
    
    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
    String nama_barang = nama_barang_field.getText().trim();
    String harga_barang_text = harga_barang_field.getText().trim();
    String deskripsi_barang = deskripsi_barang_field.getText().trim();

    // Validasi input kosong
    if (nama_barang.isEmpty() || harga_barang_text.isEmpty() || deskripsi_barang.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi input angka
    int harga_barang;
    try {
        harga_barang = Integer.parseInt(harga_barang_text);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Harga berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi file gambar
    if (selectedImageFile == null || !selectedImageFile.exists() || !selectedImageFile.isFile()) {
        JOptionPane.showMessageDialog(this, "File gambar tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validasi ukuran file gambar
    if (selectedImageFile.length() > 1048576) { // 1 MB
        JOptionPane.showMessageDialog(this, "Ukuran gambar terlalu besar! Maksimal 1 MB.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Query untuk menyimpan data ke database
    String query = "INSERT INTO barang(nama_barang, harga_barang, deskripsi_barang,gambar) VALUES (?, ?, ?, ?)";

    try (PreparedStatement ps = conn.prepareStatement(query);
         FileInputStream fis = new FileInputStream(selectedImageFile)) {

        // Mengatur parameter query
        ps.setString(1, nama_barang);
        ps.setInt(2, harga_barang);
        ps.setString(3, deskripsi_barang);
        ps.setBinaryStream(4, fis, (int) selectedImageFile.length());

        // Eksekusi query
        ps.executeUpdate();

        // Notifikasi sukses
        JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
        
        // Reset form dan refresh data
        resetForm();
        getData();
        selectedImageFile = null;

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Kesalahan database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Kesalahan saat membaca file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_createActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
    String nama_barang = nama_barang_field.getText().trim();
    String harga_barang_text = harga_barang_field.getText().trim();
    String deskripsi_barang = deskripsi_barang_field.getText().trim();

    if (nama_barang.isEmpty() || harga_barang_text.isEmpty() ||deskripsi_barang.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Semua field harus diisi!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int harga_barang;
    int jumlah_barang;
    try {
        harga_barang = Integer.parseInt(harga_barang_text);

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Harga dan jumlah harus berupa angka!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

       int selectedRow = tbl_data.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Silakan pilih data yang akan diupdate.", "Peringatan", JOptionPane.WARNING_MESSAGE);
        return;
    }

    File selectedImageFile = getSelectedImageFile(); 
    if (selectedImageFile != null && !selectedImageFile.exists() || !selectedImageFile.isFile()) {
        JOptionPane.showMessageDialog(this, "File gambar tidak valid!", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }


    byte[] imageBytes = null;
    if (selectedImageFile != null) {
        try (FileInputStream fis = new FileInputStream(selectedImageFile)) {
            imageBytes = new byte[(int) selectedImageFile.length()];
            fis.read(imageBytes);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Kesalahan saat membaca file gambar!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    // Mendapatkan ID barang yang dipilih
    int id_barang = (int) tbl_data.getValueAt(selectedRow, 0); // ID Barang ada di kolom pertama

    // Query untuk update data
    String query = "UPDATE barang SET nama_barang = ?, harga_barang = ?, deskripsi_barang = ?, gambar = ? WHERE id = ?";
    try (PreparedStatement ps = conn.prepareStatement(query)) {
        ps.setString(1, nama_barang);
        ps.setInt(2, harga_barang);
        ps.setString(3, deskripsi_barang);
        
        if (imageBytes != null) {
            ps.setBytes(4, imageBytes); // Set image bytes only if an image is provided
        } else {
            ps.setNull(4, java.sql.Types.BINARY); // Set NULL if no image is provided
        }
        
        ps.setInt(5, id_barang);
        ps.executeUpdate();

        // Notifikasi sukses
        JOptionPane.showMessageDialog(this, "Data berhasil diperbarui!");

        // Reset form dan refresh data
        resetForm();
        getData();
    } catch (SQLException e) {
        // Tangani error database
        JOptionPane.showMessageDialog(this, "Kesalahan database: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int selectedRow = tbl_data.getSelectedRow();
    if (selectedRow != -1) {
        int id_barang = (int) tbl_data.getValueAt(selectedRow, 0); // ID Barang ada di kolom pertama

        String query = "DELETE FROM barang WHERE id = ?";
        try (PreparedStatement ps = conn.prepareStatement(query)) {
            ps.setInt(1, id_barang);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
            getData(); // Refresh table setelah delete
            resetForm(); 
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal menghapus data!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Silakan pilih data yang akan dihapus.", "Peringatan", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_deleteActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        resetForm(); 
    }//GEN-LAST:event_cancelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser j = new JFileChooser();
    int returnValue = j.showOpenDialog(null);
    
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        selectedImageFile = j.getSelectedFile();
        JOptionPane.showMessageDialog(this, "Gambar dipilih: " + selectedImageFile.getName());
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        getData();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String searchQuery = search_field.getText().trim();

        // Validasi jika search field kosong
        if (searchQuery.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Silakan masukkan kata kunci untuk pencarian.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Buat query untuk mencari data berdasarkan nama_barang
        String query = "SELECT * FROM barang WHERE nama_barang LIKE ?";

        try (PreparedStatement ps = conn.prepareStatement(query)) {
            // Menyiapkan parameter pencarian
            ps.setString(1, "%" + searchQuery + "%"); // Menambahkan wildcard % di awal dan akhir untuk pencarian sebagian (LIKE)

            // Eksekusi query
            ResultSet rs = ps.executeQuery();

            // Menampilkan hasil pencarian ke dalam tabel (misalnya tbl_data)
            DefaultTableModel model = (DefaultTableModel) tbl_data.getModel();
            model.setRowCount(0); // Menghapus data lama di tabel sebelum menampilkan hasil baru

            while (rs.next()) {
                // Ambil data dari result set dan tambahkan ke tabel
                int id_barang = rs.getInt("id");
                String nama_barang = rs.getString("nama_barang");
                int harga_barang = rs.getInt("harga_barang");
                String deskripsi_barang = rs.getString("deskripsi_barang");

                // Ambil gambar dari BLOB (misalnya gambar disimpan di kolom "gambar")
                Blob imageBlob = (Blob) rs.getBlob("gambar");
                ImageIcon imageIcon = null;

                // Jika ada gambar, konversi BLOB menjadi ImageIcon
                if (imageBlob != null) {
                    InputStream inputStream = imageBlob.getBinaryStream();
                    try {
                        // Mengonversi BLOB menjadi Image
                        Image image = new ImageIcon(inputStream.readAllBytes()).getImage();
                        imageIcon = new ImageIcon(image.getScaledInstance(100, 100, Image.SCALE_SMOOTH)); // Resize to 100x100
                    } catch (Exception e) {
                        System.out.println("Error reading image: " + e.getMessage());
                    }
                }

                // Menambahkan baris ke tabel dengan gambar
                model.addRow(new Object[]{id_barang, nama_barang, harga_barang, deskripsi_barang, imageIcon});
            }

            // Menutup result set setelah penggunaan
            rs.close();
        } catch (SQLException e) {
            // Tangani kesalahan database
            JOptionPane.showMessageDialog(this, "Kesalahan dalam pencarian data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void search_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search_fieldActionPerformed

    }//GEN-LAST:event_search_fieldActionPerformed

    private void pesananButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesananButtonActionPerformed
        new Pesanan().setVisible(true);
        dispose();
    }//GEN-LAST:event_pesananButtonActionPerformed

    private void stockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Barang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Barang().setVisible(true);
            }
        });
    }
    



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton cancel;
    private javax.swing.JButton create;
    private javax.swing.JButton delete;
    private javax.swing.JTextField deskripsi_barang_field;
    private javax.swing.JTextField harga_barang_field;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nama_barang_field;
    private javax.swing.JButton pesananButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField search_field;
    private javax.swing.JPanel sidebar;
    private javax.swing.JButton stockButton;
    private javax.swing.JPanel stockPanel;
    private javax.swing.JTable tbl_data;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables


}
